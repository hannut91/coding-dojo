/**
 * ## 이해
 *
 * 미지의 것: N과 K가 주어질 때 N이 1이 될 때 까지 1을 빼던지 K로 나누던지 해서 최소 수행해야 하는 횟수를 구하여라
 * 자료
 *   - N과 K는 자연수이다.
 *   - 1을 빼는 것보다 K로 나누는게 1로 더 많이 가까워 질 수 있다.
 *   - 나머지 연산으로 완전히 나누어 떨어지는지 알 수 있다.
 * 조건
 *   - N은 항상 K보다 크다.
 *
 * ## 계획
 *   - N이 1이되면 종료한다.
 *   - N이 K로 나누어 떨어진다면, 나누고 카운트 값을 1 증가시키고 나눈 나머지로 다시 반복한다.
 *   - N이 K로 나누어 떨이지지 않는다면 1을 빼고 카운트 값을 1증가시키고 나머지로 다시 반복한다.
 *
 * ## 실행
 *
 * ## 반성
 *
 * - 문제를 읽으면서 정리된 것을 다시 한 번 자료로 정리해서 확신을 가지고 코드를
 *   작성했다. 수가 많을 경우 재귀가 터질 것 같으므로, while로 수정해야겠다.
 *
 */

// 재귀
// const run = (n, k, count = 0) => {
//   if (n === 1) {
//     return count;
//   }

//   if (n % k === 0) {
//     return run(n / k, k, count + 1);
//   }

//   return run(n - 1, k, count + 1);
// };

// while
const run = (n, k) => {
  let count = 0;
  while (true) {
    if (n === 1) {
      return count;
    }

    if (n % k === 0) {
      n /= k;
      count++;
    } else {
      n -= 1;
      count++;
    }
  }
};


test('run', () => {
  expect(run(17, 4)).toBe(3);
  expect(run(25, 5)).toBe(2);
});
